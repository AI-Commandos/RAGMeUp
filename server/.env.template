HF_TOKEN=
llm_model=meta-llama/Meta-Llama-3.1-8B-Instruct
llm_assistant_token="<|eot_id|>assistant\n\n"
embedding_model=avsolatorio/GIST-small-Embedding-v0
trust_remote_code=True
force_cpu=False

provenance_method=rerank
provenance_similarity_llm=sentence-transformers/distiluse-base-multilingual-cased-v2
provenance_include_query=False
provenance_llm_prompt="Instruction: You are a provenance auditor that needs to exactly determine how much an answer given to a user question was based on a given input document, knowing that more than just that one document were considered. Documents may be fully used verbatim, partially used or even translated. You need to give a score indicating how much a source document was used in creating the answer given to a user query, this score must be 0 = source document is not used at all, 1 = barely used, 2 = moderately used, 3 = mostly used, 4 = almost fully used and 5 = full text included in answer. You are forced to always answer only with the score from 0 to 5, don't explain yourself or add more text than just the score.

The user's query is:

{query}

The answer given is to this user query is:

{answer}

The source document that you need to score is the following:

{context}"

data_directory='data'
file_types="pdf,json,docx,pptx,xslx,csv,xml,txt"
json_schema="."
json_text_content=False
xml_xpath="//"

max_document_limit=10
neo4j_location='URL_to_neo4j_server'
vector_store=milvus
vector_store_uri='data.db'
vector_store_collection=ragmeup_documents
vector_store_sparse_uri=bm25_db.pickle
vector_store_initial_load=True
vector_store_k=10
document_chunks_pickle=rag_chunks.pickle
file_upload_using_llm=True
dynamic_neo4j_schema=False
rerank=True
rerank_k=3
rerank_model=flashrank

temperature=0.2
repetition_penalty=1.1
max_new_tokens=1000

rag_instruction="Instruction: You are a digital librarian that can answer generic questions on relevant content quickly and succinctly. Here are a few documents from the library that you can use to answer the user's question, retrieved as documents from a database. Be sure to motivate your answer and always mention your source, so which of the documents you used to formulate the answer:

{context}"
rag_question_initial="The initial question you have to answer:

{question}"
rag_question_followup="The follow-up question you have to answer:

{question}"
rag_fetch_new_instruction="Instruction: You are a digital librarian with a database that contains relevant documents for user queries. Users want to ask questions based on those documents and ask questions that either need you to fetch new documents from the database or that are a followup question on previously obtained documents. You need to decide whether you are going to fetch new documents or whether the user is asking a follow-up question but you don't get to see the actual documents the user potentially is looking at.\nShould new documents be fetched from the database based on this user query? Answer with yes or no."
rag_fetch_new_question="The user question is the following: \"{question}\"\n"

use_rewrite_loop=True
rewrite_query_instruction="You have to answer a user question based on documents retrieved from a document database. It is your task to decide whether or not the documents contain the answer to the user's query. You can always only answer with exactly yes or no. The documents that are currently fetched from the database are:

{context}"
rewrite_query_question="The user's question is:

{question}"
rewrite_query_prompt="You are given a user query that should be answered by looking up documents that from a document store using a distance based similarity measure. The documents fetched from the document store were found to be irrelevant to answer the question. Rewrite the following question into an alternative that increases the likelihood of finding relevant documents from the database. You may only answer with the exact rephrasing. The original question is: {question}"

use_re2=True
re2_prompt="Read the question again: "

splitter='RecursiveCharacterTextSplitter'
chunk_size=512
chunk_overlap=20
breakpoint_threshold_type=percentile
breakpoint_threshold_amount=None
number_of_chunks=None

use_openai=False
openai_model_name='gpt-4o-mini'
use_gemini=False
gemini_model_name='gemini-pro'
GOOGLE_API_KEY='Your_API_key'
use_azure=False
use_ollama=False
ollama_model='llama3.1'

ragas_sample_size=200
ragas_qa_pairs=10
ragas_timeout=300
ragas_max_workers=1
ragas_question_instruction="You direct another LLM with questions. Write a question we can ask to an LLM that it will be able to answer based on these existing documents. Make sure the question can be accurately answered using the documents' contents and never ever reply with anything else but the question we need to supply to the LLM:

{context}"
ragas_question_query="Generate a question to that can be answered given the input documents, nothing else but the question and no explanation."
ragas_answer_instruction="You are a digital librarian and need to answer questions based on input documents. Here are the documents you are forced to base your answer on:

{context}"
ragas_answer_query="Answer the following question, never give any explanation or other output than the generated article itself:

{question}"

rag_retrieval_instruction="Instruction: You are a graph database query assistant. Based on the graph schema below, generate a Cypher query to search for the answer to the user's question. If the schema does not support the query, respond with 'None'.
Schema:
{schema}"
retrieval_few_shot="Few-shot examples:
Example 1:
User query: \'What topics are available?\'
Output: MATCH (t:Topic) RETURN t.name

Example 2:
User query: \'What is the size of an elephant?\'
Output: None"
rag_retrieval_question="The user question is:

{question}

Please generate a Cypher question to answer, or return None if it does not fit the Schema"

neo4j_insert_instruction= "You are a Neo4j database assistant. Your task is to generate Cypher queries for inserting data into the Neo4j graph database. Use only the nodes, properties, and relationships specified in the provided schema. Ensure that all generated queries are valid Cypher and JSON format, and conform to the schema. Make a maximum 9 additions. If the input data cannot be mapped to the schema, return 'None' and do not generate any invalid query. "
neo4j_insert_schema= "Instruction: You are tasked with generating Cypher queries to insert data into the Neo4j graph database. Use only the nodes, properties, and relationships defined in the following schema. Ensure the queries are valid and align with the schema. If the input data cannot be mapped to the schema, return 'None'.

Schema:
{schema}

Input data:
{data}

Output: "


neo4j_insert_data_only= "Instruction: You are tasked with generating Cypher queries to insert data into the Neo4j graph database. Use only the nodes, properties, and relationships defined in the following schema. Ensure the queries are valid and align with the schema. If the input data cannot be mapped to the schema, return 'None'.

Schema:
Nodes:
- Topic: name
- Fact: name
Relationships:
- IS_PART_OF: No properties

Input data:
{data}

Output: "

neo4j_insert_few_shot="Few-shot examples:Example 1: Schema:  Nodes: - Quote: text - Topic: name Relationships:  - IS_PART_OF: None  Input data:Course block 4 Pitching Tools you need (all available on Canvas > Files): • A series of short videos on pitching by Nathalie Mangelaars (links available on Canvas) • Pitch Toolkit by Pitch Academy • Example Pitch Deck by Horseplay Ventures Expected deliverables: • Pitch script • Slide deck • A Minimum Viable Product (MVP) (also see here and here) Notes: • You are strongly encouraged to already draft a pitch script and create a preliminary slide deck before the pitch training takes place (i.e., on Wednesday November 22). If you come prepared, then Cyrille van Hoof and Nathalie Mangelaars can focus on important opportunities for improvement instead of starting from scratch, which saves us valuable time. In case you do so, include both your draft and final versions to your portfolio. Output:[{\"query\": \"MERGE (q:Quote {text: $quoteText}) MERGE (t:Topic {name: $topicName}) MERGE (q)-[:IS_PART_OF]->(t)\",\"parameters\": { \"quoteText\": \"Pitch Toolkit by Pitch Academy\",\"topicName\": \"Needed tools\"}},{\"query\": \"MERGE (q:Quote {text: $quoteText}) MERGE (t:Topic {name: $topicName}) MERGE (q)-[:IS_PART_OF]->(t)\",\"parameters\": {\"quoteText\": \"A Minimum Viable Product (MVP) (also see here and here) \",\"topicName\": \"Deliverables\"}}]"

